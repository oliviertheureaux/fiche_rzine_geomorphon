qgis_run_algorithm("gdal:buildvirtualraster",
INPUT = ras_lst,
ASSIGN_CRS="EPSG:2154"
OUTPUT=dem_09)
qgis_run_algorithm("gdal:buildvirtualraster",
INPUT = ras_lst,
ASSIGN_CRS='EPSG:2154',
OUTPUT=dem_09)
path_dem_09 <- getwd() + "/data/RGE_5m_Dep09/"
path_dem_09 <- paste(getwd()"/data/RGE_5m_Dep09/")
getwd()
path_dem_09 <- paste(getwd(),"/data/RGE_5m_Dep09/")
path_dem_09
path_dem_09 <- paste(getwd(),"/data/RGE_5m_Dep09/", sep="")
path_dem_09
path_dem_09 <- "/data/RGE_5m_Dep09/"
path_dem_09 <- paste(getwd(),"/data/RGE_5m_Dep09/", sep="")
dem_09 <- "data_processed/RGE_5m_Dep09.vrt"
ras_lst <- list.files(path_dem_09, full.names = T, pattern = ".asc$", recursive=T)
qgis_run_algorithm("gdal:buildvirtualraster",
INPUT = ras_lst,
ASSIGN_CRS='EPSG:2154',
OUTPUT=dem_09)
qgis_run_algorithm("gdal:buildvirtualraster",
INPUT = ras_lst,
SEPARATE=false,
ASSIGN_CRS='EPSG:2154',
OUTPUT=dem_09)
qgis_run_algorithm("gdal:buildvirtualraster",
INPUT = ras_lst,
SEPARATE=FALSE,
ASSIGN_CRS='EPSG:2154',
OUTPUT=dem_09)
# Pour le département des Hautes-Alpes (05)
# indication du répertoire contenant les dalles de MNT des Hautes-Alpes
path_dem_05 <- "/data/RGE_5m_Dep05/"
# on transforme ce chemin en chemin abslou
path_dem_05 <- paste(getwd(),"/data/RGE_5m_Dep05/", sep="")
# le nom et le chemin du raster virtuel qui sera produit
dem_05 <- "data_processed/RGE_5m_Dep05.vrt"
# on construit la liste de toutes les dalles de MNT du département
ras_lst <- list.files(path_dem_05, full.names = T, pattern = ".asc$", recursive=T)
# on construit le raster virtuel des Hautes-Alpes via QGIS process
qgis_run_algorithm("gdal:buildvirtualraster",
INPUT = ras_lst,
SEPARATE=FALSE,
ASSIGN_CRS='EPSG:2154',
OUTPUT=dem_05)
# Pour le département du Puy-de-Dôme (63)
# indication du répertoire contenant les dalles de MNT du Puy-de-Dôme
path_dem_63 <- "/data/RGE_5m_Dep63/"
# on transforme ce chemin en chemin abslou
path_dem_63 <- paste(getwd(),"/data/RGE_5m_Dep63/", sep="")
# le nom et le chemin du raster virtuel qui sera produit
dem_63 <- "data_processed/RGE_5m_Dep63.vrt"
# on construit la liste de toutes les dalles de MNT du département
ras_lst <- list.files(path_dem_63, full.names = T, pattern = ".asc$", recursive=T)
# on construit le raster virtuel du Puy-de-Dôme via QGIS process
qgis_run_algorithm("gdal:buildvirtualraster",
INPUT = ras_lst,
SEPARATE=FALSE,
ASSIGN_CRS='EPSG:2154',
OUTPUT=dem_63)
riberot <- st_read("data_processed/bv_riberot.gpkg")
severaisse <- st_read("data_processed/bv_severaisse.gpkg")
tarentaine <- st_read("data_processed/bv_tarentaine.gpkg")
library("terra")
mnt_09 <- rast("data_processed/RGE_5m_Dep09.vrt")
plot(mnt_09)
dem_09 <- rast("data_processed/RGE_5m_Dep09.vrt")
dem_riberot <- crop(dem_09, bv_riberot)
dem_riberot <- crop(dem_09, riberot)
plot(dem_riberot)
dem_riberot <- crop(dem_09, riberot, mask=TRUE)
plot(dem_riberot)
plot(dem_riberot)
dem_09 <- rast("data_processed/RGE_5m_Dep09.vrt")
dem_riberot <- mask(dem_09, riberot)
a <- vect(riberot)
a
dem_riberot <- mask(dem_09, a)
plot(dem_riberot)
riberot <- vect(riberot)
dem_riberot <- cropt(dem_09, riberot)
dem_riberot <- crop(dem_09, riberot)
plot(dem_riberot)
dem_riberot <- mask(dem_09, riberot)
plot(dem_riberot)
dem_riberot <- mask(dem_riberot, riberot)
plot(dem_riberot)
dem_riberot <- crop(dem_09, riberot)
plot(dem_riberot)
dem_riberot <- mask(dem_riberot, riberot)
plot(dem_riberot)
dem_05 <- rast("data_processed/RGE_5m_Dep05.vrt")
# conversion des limites de la Séveraisse en un objet SpatVector utilisable par terra
severaisse <- vect(severaisse)
# découpage de ce MNT selon l'étendue spatiale des limites de la Severaisse
dem_severaisse <- crop(dem_05, severaisse)
# masque du MNT selon les limites de la Severaisse
dem_severaisse <- mask(dem_severaisse, severaisse)
plot(dem_severaisse)
# chargement du MNT virtuel du Puy-de-Dôme
dem_63 <- rast("data_processed/RGE_5m_Dep63.vrt")
# conversion des limites de la Tarentaine en un objet SpatVector utilisable par terra
tarentaine <- vect(tarentaine)
# découpage de ce MNT selon l'étendue spatiale des limites de la Tarentaine
dem_tarentaine <- crop(dem_63, tarentaine)
# masque du MNT selon les limites de la Tarentaine
dem_tarentaine <- mask(dem_tarentaine, tarentaine)
plot(dem_tarentaine)
install.packages("tmap")
install.packages("sp")
install.packages("raster")
install.packages("rgdal")
getwd()
# chargement de la librairie sf pour la manipulation de couches vecteurs
library(sf)
# chargement de la librairie dplyr pour utiliser simplement les filtres de dataframe
library ("dplyr")
# chargement de la librairie terra pour la manipulation de raster
library("terra")
bv <- st_read("data/BassinVersantTopographique_FXX.gpkg")
geom_riberot <- "data_processed/geomorphons_Riberot.tif"
geomorphons_Riberot = qgis_run_algorithm("saga:geomorphons",
DEM = dem_riberot,
THRESHOLD = 1,
RADIUS = 100, # lookup distance/rayon de recherche
METHOD = 1,
GEOMORPHONS = geom_riberot)
library(qgisprocess)
# Analyse des géomorphons du Ribérot
# le chemin et le nom du raster de géomorphons en sortie
geom_riberot <- "data_processed/geomorphons_Riberot.tif"
geomorphons_Riberot = qgis_run_algorithm("saga:geomorphons",
DEM = dem_riberot,
THRESHOLD = 1,
RADIUS = 100, # lookup distance/rayon de recherche
METHOD = 1,
GEOMORPHONS = geom_riberot)
qgis_algorithms()
# Analyse des géomorphons du Ribérot
# le chemin et le nom du raster de géomorphons en sortie
geom_riberot <- "data_processed/geomorphons_Riberot.tif"
geomorphons_Riberot = qgis_run_algorithm("grass7:r.geomorphon",
DEM = dem_riberot,
THRESHOLD = 1,
RADIUS = 100, # lookup distance/rayon de recherche
METHOD = 1,
GEOMORPHONS = geom_riberot)
terra::writeRaster(dem_riberot, "data_processed/dem_Riberot.tif", filetype = "GTiff", overwrite = TRUE)
writeRaster(dem_riberot, "data_processed/dem_Riberot.tif", overwrite=TRUE)
x <- writeRaster(dem_riberot, "data_processed/dem_Riberot.tif", overwrite=TRUE)
plot(dem_riberot)
View(dem_riberot)
knitr::opts_chunk$set(echo = TRUE)
library(tmap)
library(raster)
library(sp)
r <- raster("data/geomorphon_riberot_5m_LD100.tif")
crs(r) <- "EPSG:2154"
tm_shape(r) +
tm_raster(style= "cat",
labels = c("Plan", "Sommet", "Crête", "Haut de versant", "Eperon", "Pente", "Creux de versant", "Bas de versant", "Vallée", "Dépression"),
palette = c("#dcdcdc", "#380000", "#c80000", "#ff5014", "#fad23c", "#ffff3c", "#b4e614", "#3cfa96", "#0000ff", "#000038"),
title="Géomorphons du Ribérot") +
tm_compass(type = "4star", size = 1, position = c("right", "top")) +
tm_scale_bar(breaks = 1) +
tm_layout(legend.outside = T)
library(tmap)
library(raster)
library(sp)
r <- raster("data/geomorphon_severaisse_5m_LD100.tif")
crs(r) <- "EPSG:2154"
tm_shape(r) +
tm_raster(style= "cat",
labels = c("Plan", "Sommet", "Crête", "Haut de versant", "Eperon", "Pente", "Creux de versant", "Bas de versant", "Vallée", "Dépression"),
palette = c("#dcdcdc", "#380000", "#c80000", "#ff5014", "#fad23c", "#ffff3c", "#b4e614", "#3cfa96", "#0000ff", "#000038"),
title="Géomorphons de la Séveraisse") +
tm_compass(type = "4star", size = 1, position = c("right", "top")) +
tm_scale_bar(breaks = 1) +
tm_layout(legend.outside = T)
library(tmap)
library(raster)
library(sp)
r <- raster("data/geomorphon_tarentaine_5m_LD100.tif")
crs(r) <- "EPSG:2154"
tm_shape(r) +
tm_raster(style= "cat",
labels = c("Plan", "Sommet", "Crête", "Haut de versant", "Eperon", "Pente", "Creux de versant", "Bas de versant", "Vallée", "Dépression"),
palette = c("#dcdcdc", "#380000", "#c80000", "#ff5014", "#fad23c", "#ffff3c", "#b4e614", "#3cfa96", "#0000ff", "#000038"),
title="Géomorphons de la Tarentaine") +
tm_compass(type = "4star", size = 1, position = c("left", "top")) +
tm_scale_bar( breaks = 1) +
tm_layout(legend.outside = T)
library(gtsummary)
riberot <- read.csv("rapport_geomorphon_riberot_5m_LD100.csv")
colnames(riberot) <- c("Geomorphon", "Pixel", "Superficie")
riberot$Geomorphon <- as.factor(riberot$Geomorphon)
riberot$Nom <- factor(riberot$Geomorphon,
levels = c("1",  "2",  "3" , "4" , "5"  ,"6" , "7" , "8" , "9"  ,"10"),
labels = c("Plan", "Sommet", "Crête", "Haut de versant", "Eperon", "Pente", "Creux de versant", "Bas de versant", "Vallée", "Dépression"))
theme_gtsummary_language("fr", decimal.mark = "," , big.mark = " ")
tbl_summary(riberot,
label = Pixel ~ "Nombre de pixels",
include = c("Pixel"),
by = Nom,
statistic = list(all_continuous() ~ "{sum}")
)
library(gtsummary)
riberot <- read.csv("rapport_geomorphon_severaisse_5m_LD100.csv")
colnames(riberot) <- c("Geomorphon", "Pixel", "Superficie")
riberot$Geomorphon <- as.factor(riberot$Geomorphon)
riberot$Nom <- factor(riberot$Geomorphon,
levels = c("1",  "2",  "3" , "4" , "5"  ,"6" , "7" , "8" , "9"  ,"10"),
labels = c("Plan", "Sommet", "Crête", "Haut de versant", "Eperon", "Pente", "Creux de versant", "Bas de versant", "Vallée", "Dépression"))
theme_gtsummary_language("fr", decimal.mark = "," , big.mark = " ")
tbl_summary(riberot,
label = Pixel ~ "Nombre de pixels",
include = c("Pixel"),
by = Nom,
statistic = list(all_continuous() ~ "{sum}")
)
library(gtsummary)
riberot <- read.csv("rapport_geomorphon_tarentaine_5m_LD100.csv")
colnames(riberot) <- c("Geomorphon", "Pixel", "Superficie")
riberot$Geomorphon <- as.factor(riberot$Geomorphon)
riberot$Nom <- factor(riberot$Geomorphon,
levels = c("1",  "2",  "3" , "4" , "5"  ,"6" , "7" , "8" , "9"  ,"10"),
labels = c("Plan", "Sommet", "Crête", "Haut de versant", "Eperon", "Pente", "Creux de versant", "Bas de versant", "Vallée", "Dépression"))
theme_gtsummary_language("fr", decimal.mark = "," , big.mark = " ")
tbl_summary(riberot,
label = Pixel ~ "Nombre de pixels",
include = c("Pixel"),
by = Nom,
statistic = list(all_continuous() ~ "{sum}")
)
plot(dem_riberot)
plot(dem_63)
plot(dem_05)
# chargement de la couche des bassins de toute la France
bv <- st_read("data/BassinVersantTopographique_FXX.gpkg")
# extraction du bassin du Ribérot selon son nom
riberot <- bv %>% filter(bv$TopoOH == "Le Ribérot")
# export du bassin du Ribérot en une couche autonome (facultatif)
st_write(riberot, "data_processed/bv_riberot.gpkg")
# extraction du bassin de la Séveraisse (La Séveraisse de sa source au torrent de Navette inclus)
severaisse <- bv %>% filter(bv$TopoOH == "La Séveraisse de sa source au torrent de Navette inclus")
st_write(severaisse, "data_processed/bv_severaisse.gpkg")
# extraction du bassin de la Tarentaine (La Tarentaine (Trentaine) de sa source au confluent de l'Eau Verte)
tarentaine <- bv %>% filter(bv$TopoOH == "La Tarentaine (Trentaine) de sa source au confluent de l'Eau Verte")
st_write(tarentaine, "data_processed/bv_tarentaine.gpkg")
plot(riberot)
# Pour le département de l'Ariège (09)
# indication du répertoire contenant les dalles de MNT de l'Ariège
path_dem_09 <- "/data/RGE_5m_Dep09/"
# on transforme ce chemin en chemin abslou
path_dem_09 <- paste(getwd(),"/data/RGE_5m_Dep09/", sep="")
# le nom et le chemin du raster virtuel qui sera produit
dem_09 <- "data_processed/RGE_5m_Dep09.vrt"
# on construit la liste de toutes les dalles de MNT du département
ras_lst <- list.files(path_dem_09, full.names = T, pattern = ".asc$", recursive=T)
# on construit le raster virtuel de l'Ariège via QGIS process
qgis_run_algorithm("gdal:buildvirtualraster",
INPUT = ras_lst,
SEPARATE=FALSE,
ASSIGN_CRS='EPSG:2154',
OUTPUT=dem_09)
# Pour le département des Hautes-Alpes (05)
# indication du répertoire contenant les dalles de MNT des Hautes-Alpes
path_dem_05 <- "/data/RGE_5m_Dep05/"
# on transforme ce chemin en chemin abslou
path_dem_05 <- paste(getwd(),"/data/RGE_5m_Dep05/", sep="")
# le nom et le chemin du raster virtuel qui sera produit
dem_05 <- "data_processed/RGE_5m_Dep05.vrt"
# on construit la liste de toutes les dalles de MNT du département
ras_lst <- list.files(path_dem_05, full.names = T, pattern = ".asc$", recursive=T)
# on construit le raster virtuel des Hautes-Alpes via QGIS process
qgis_run_algorithm("gdal:buildvirtualraster",
INPUT = ras_lst,
SEPARATE=FALSE,
ASSIGN_CRS='EPSG:2154',
OUTPUT=dem_05)
# Pour le département du Puy-de-Dôme (63)
# indication du répertoire contenant les dalles de MNT du Puy-de-Dôme
path_dem_63 <- "/data/RGE_5m_Dep63/"
# on transforme ce chemin en chemin abslou
path_dem_63 <- paste(getwd(),"/data/RGE_5m_Dep63/", sep="")
# le nom et le chemin du raster virtuel qui sera produit
dem_63 <- "data_processed/RGE_5m_Dep63.vrt"
# on construit la liste de toutes les dalles de MNT du département
ras_lst <- list.files(path_dem_63, full.names = T, pattern = ".asc$", recursive=T)
# on construit le raster virtuel du Puy-de-Dôme via QGIS process
qgis_run_algorithm("gdal:buildvirtualraster",
INPUT = ras_lst,
SEPARATE=FALSE,
ASSIGN_CRS='EPSG:2154',
OUTPUT=dem_63)
dem_09 <- rast("data_processed/RGE_5m_Dep09.vrt")
# conversion des limites du Ribérot en un objet SpatVector utilisable par terra
riberot <- vect(riberot)
# découpage de ce MNT selon l'étendue spatiale des limites du Ribérot
dem_riberot <- crop(dem_09, riberot)
# masque du MNT selon les limites du Ribérot
dem_riberot <- mask(dem_riberot, riberot)
plot(dem_riberot)
terra::writeRaster(dem_riberot, "data_processed/dem_Riberot.tif", filetype = "GTiff", overwrite = TRUE)
dem_05 <- rast("data_processed/RGE_5m_Dep05.vrt")
# conversion des limites de la Séveraisse en un objet SpatVector utilisable par terra
severaisse <- vect(severaisse)
# découpage de ce MNT selon l'étendue spatiale des limites de la Severaisse
dem_severaisse <- crop(dem_05, severaisse)
# masque du MNT selon les limites de la Severaisse
dem_severaisse <- mask(dem_severaisse, severaisse)
# export du MNT (facultatif)
terra::writeRaster(dem_severaisse, "data_processed/dem_Severaisse.tif", filetype = "GTiff", overwrite = TRUE)
terra::writeRaster(dem_tarentaine, "data_processed/dem_Tarentaine.tif", filetype = "GTiff", overwrite = TRUE)
dem_63 <- rast("data_processed/RGE_5m_Dep63.vrt")
# conversion des limites de la Tarentaine en un objet SpatVector utilisable par terra
tarentaine <- vect(tarentaine)
# découpage de ce MNT selon l'étendue spatiale des limites de la Tarentaine
dem_tarentaine <- crop(dem_63, tarentaine)
# masque du MNT selon les limites de la Tarentaine
dem_tarentaine <- mask(dem_tarentaine, tarentaine)
# export du MNT (facultatif)
terra::writeRaster(dem_tarentaine, "data_processed/dem_Tarentaine.tif", filetype = "GTiff", overwrite = TRUE)
geom_riberot <- "data_processed/geomorphons_Riberot.tif"
geomorphons_Riberot = qgis_run_algorithm("grass7:r.geomorphon",
DEM = dem_riberot,
THRESHOLD = 1,
RADIUS = 100, # lookup distance/rayon de recherche
METHOD = 1,
GEOMORPHONS = geom_riberot)
dem_riberot
geomorphons_Riberot = qgis_run_algorithm("grass7:r.geomorphon",
DEM = dem_riberot,
THRESHOLD = 1,
RADIUS = 10, # lookup distance/rayon de recherche
METHOD = 1,
GEOMORPHONS = geom_riberot)
geomorphons_Riberot = qgis_run_algorithm("grass7:r.geomorphon",
DEM = dem_riberot,
SEARCH = 100, # lookup distance/rayon de recherche
FLAT = 1,
GEOMORPHONS = geom_riberot)
geom_riberot <- "data_processed/geomorphons_Riberot.tif"
geomorphons_Riberot = qgis_run_algorithm("grass7:r.geomorphon",
ELEVATION = dem_riberot,
SEARCH = 100, # lookup distance/rayon de recherche
FLAT = 1,
GEOMORPHONS = geom_riberot)
geom_riberot <- "data_processed/geomorphons_Riberot.tif"
geomorphons_Riberot = qgis_run_algorithm("grass7:r.geomorphon",
ELEVATION = "/home/poulpe/scripts/fiche_rzine_geomorphon/data_processed/dem_riberot.tif",
SEARCH = 100, # lookup distance/rayon de recherche
FLAT = 1,
GEOMORPHONS = geom_riberot)
geomorphons_Riberot = qgis_run_algorithm("grass7:r.geomorphon",
ELEVATION = "/home/poulpe/scripts/fiche_rzine_geomorphon/data_processed/dem_Riberot.tif",
SEARCH = 100, # lookup distance/rayon de recherche
FLAT = 1,
GEOMORPHONS = geom_riberot)
geomorphons_Riberot = qgis_run_algorithm("grass7:r.geomorphon",
elevation=/home/poulpe/scripts/fiche_rzine_geomorphon/data_processed/dem_Riberot.tif,
SEARCH = 100, # lookup distance/rayon de recherche
FLAT = 1,
GEOMORPHONS = geom_riberot)
geomorphons_Riberot = qgis_run_algorithm("grass7:r.geomorphon",
ELEVATION = /home/poulpe/scripts/fiche_rzine_geomorphon/data_processed/dem_Riberot.tif,
SEARCH = 100, # lookup distance/rayon de recherche
FLAT = 1,
GEOMORPHONS = geom_riberot)
geomorphons_Riberot = qgis_run_algorithm("grass7:r.geomorphon",
ELEVATION = "/home/poulpe/scripts/fiche_rzine_geomorphon/data_processed/dem_Riberot.tif",
SEARCH = 100, # lookup distance/rayon de recherche
FLAT = 1,
GEOMORPHONS = geom_riberot)
geomorphons_Riberot = qgis_run_algorithm("grass7:r.geomorphon",
ELEVATION = "/home/poulpe/scripts/fiche_rzine_geomorphon/data_processed/dem_Riberot.tif",
SEARCH = 100, # lookup distance/rayon de recherche
FLAT = 1,
GEOMORPHONS = geom_riberot)
geomorphons_Riberot = qgis_run_algorithm("grass7:r.geomorphon",
elevation = "/home/poulpe/scripts/fiche_rzine_geomorphon/data_processed/dem_Riberot.tif",
search = 100, # lookup distance/rayon de recherche
flat = 1,
forms = geom_riberot)
geomorphons_Riberot = qgis_run_algorithm("grass7:r.geomorphon",
elevation = dem_riberot,
search = 100, # lookup distance/rayon de recherche
flat = 1,
forms = geom_riberot)
geomorphons_Riberot = qgis_run_algorithm("grass7:r.geomorphon",
elevation = dem_riberot,
search = 20, # lookup distance/rayon de recherche
flat = 1,
forms = geom_riberot)
geom_severaisse <- "data_processed/geomorphons_Severaisse.tif"
qgis_run_algorithm("grass7:r.geomorphon",
elevation = dem_severaisse,
search = 20, # lookup distance/rayon de recherche
flat = 1,
forms = geom_severaisse)
geom_tarentaine <- "data_processed/geomorphons_Tarentaine.tif"
qgis_run_algorithm("grass7:r.geomorphon",
elevation = dem_tarentaine,
search = 20, # lookup distance/rayon de recherche
flat = 1,
forms = geom_tarentaine)
library(tmap)
geom_riberot <- rast("data_processed/geomorphons_Riberot.tif")
#crs(r) <- "EPSG:2154"
tm_shape(geom_riberot) +
tm_raster(style= "cat",
labels = c("Plan", "Sommet", "Crête", "Haut de versant", "Eperon", "Pente", "Creux de versant", "Bas de versant", "Vallée", "Dépression"),
palette = c("#dcdcdc", "#380000", "#c80000", "#ff5014", "#fad23c", "#ffff3c", "#b4e614", "#3cfa96", "#0000ff", "#000038"),
title="Géomorphons du Ribérot") +
tm_compass(type = "4star", size = 1, position = c("right", "top")) +
tm_scale_bar(breaks = 1) +
tm_layout(legend.outside = T)
hist(geom_tarentaine)
geom_tarentaine <- rast("data_processed/geomorphons_Tarentaine.tif")
hist(geom_tarentaine)
h <- hist(geom_tarentaine)
h
h <- unique(geom_tarentaine)
h
h <- freq(geom_tarentaine)
h
knitr::opts_chunk$set(echo = TRUE)
library(qgisprocess)
qgis_configure()
library(sf)
# chargement de la librairie dplyr pour utiliser simplement les filtres de dataframe
library ("dplyr")
# chargement de la librairie terra pour la manipulation de raster
library("terra")
# chargement de la librairie tmap pour la création de cartes
library(tmap)
# chargement de la couche des bassins de toute la France
bv <- st_read("data/BassinVersantTopographique_FXX.gpkg")
# extraction du bassin du Ribérot selon son nom
riberot <- bv %>% filter(bv$TopoOH == "Le Ribérot")
# export du bassin du Ribérot en une couche autonome (facultatif)
st_write(riberot, "data_processed/bv_riberot.gpkg")
# extraction du bassin de la Séveraisse (La Séveraisse de sa source au torrent de Navette inclus)
severaisse <- bv %>% filter(bv$TopoOH == "La Séveraisse de sa source au torrent de Navette inclus")
st_write(severaisse, "data_processed/bv_severaisse.gpkg")
# extraction du bassin de la Tarentaine (La Tarentaine (Trentaine) de sa source au confluent de l'Eau Verte)
tarentaine <- bv %>% filter(bv$TopoOH == "La Tarentaine (Trentaine) de sa source au confluent de l'Eau Verte")
st_write(tarentaine, "data_processed/bv_tarentaine.gpkg")
# Pour le département de l'Ariège (09)
# indication du répertoire contenant les dalles de MNT de l'Ariège
path_dem_09 <- "/data/RGE_5m_Dep09/"
# on transforme ce chemin en chemin abslou
path_dem_09 <- paste(getwd(),"/data/RGE_5m_Dep09/", sep="")
# le nom et le chemin du raster virtuel qui sera produit
dem_09 <- "data_processed/RGE_5m_Dep09.vrt"
# on construit la liste de toutes les dalles de MNT du département
ras_lst <- list.files(path_dem_09, full.names = T, pattern = ".asc$", recursive=T)
# on construit le raster virtuel de l'Ariège via QGIS process
qgis_run_algorithm("gdal:buildvirtualraster",
INPUT = ras_lst,
SEPARATE=FALSE,
ASSIGN_CRS='EPSG:2154',
OUTPUT=dem_09)
qgis_run_algorithm("gdal:buildvirtualraster",
INPUT = ras_lst,
SEPARATE=FALSE,
ASSIGN_CRS='EPSG:2154',
OUTPUT=dem_09)
library(qgisprocess)
qgis_run_algorithm("gdal:buildvirtualraster",
INPUT = ras_lst,
SEPARATE=FALSE,
ASSIGN_CRS='EPSG:2154',
OUTPUT=dem_09)
qgis_configure()
remotes::install_github("paleolimbot/qgisprocess")
qgis_configure()
ras_lst
qgis_run_algorithm("gdal:buildvirtualraster",
INPUT = ras_lst,
SEPARATE=FALSE,
ASSIGN_CRS='EPSG:2154',
OUTPUT=dem_09)
qgis_configure()
riberot <- st_read("data_processed/bv_riberot.gpkg")
result <- qgis_run_algorithm(
"native:buffer",
INPUT = riberot,
DISTANCE = 1,
DISSOLVE = TRUE,
.quiet = TRUE
)
options(qgisprocess.path = "/usr/bin/qgis_process")
qgis_run_algorithm("gdal:buildvirtualraster",
INPUT = ras_lst,
SEPARATE=FALSE,
ASSIGN_CRS='EPSG:2154',
OUTPUT=dem_63)
qgis_configure()
remotes::install_github("paleolimbot/qgisprocess")
remotes::install_github("paleolimbot/qgisprocess", force=TRUE)
remotes::install_github("paleolimbot/qgisprocess")
library(qgisprocess)
qgis_configure()
qgis_run_algorithm("gdal:buildvirtualraster",
INPUT = ras_lst,
SEPARATE=FALSE,
ASSIGN_CRS='EPSG:2154',
OUTPUT=dem_09)
