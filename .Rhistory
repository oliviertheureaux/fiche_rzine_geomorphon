mnt <- crop(ras, riberot_shp)
riberot_shp
mnt <- crop(ras, riberot_shp)
riberot_shp <- st_transform(riberot_shp, crs = "2154")
riberot_shp <- st_transform(riberot_shp, crs = "epsg:2154")
mnt <- crop(ras, riberot_shp)
plot(riberot_shp, add=T, col="red")
plot(riberot_shp)
riberot_shp <- st_transform(riberot_shp, crs = "epsg:2154")
riberot_shp
riberot_shp <- st_transform(riberot_shp, crs = "epsg:4326")
plot(mnt)
# Sélection du BV via la GeoJSON ----
setwd("~/OT/GEO/GEO/MASTER/M2/SPATIAL_TREE_P/R/RZINE")
bv <- st_read("BassinVersantTopographique.json")
riberot <- bv %>% filter(bv$TopoOH == "Le Ribérot")
plot(riberot)
riberot
riberot_proj <- st_transform(riberot, 2154)
plot(riberot_proj)
st_write(riberot_proj, paste0(getwd(), "/", "riberot.shp"), overwrite=T)
st_write(riberot_proj, paste0(getwd(), "/", "riberot.shp"))
st_write(riberot_proj, paste0(getwd(), "/", "riberot.shp"))
riberot_shp <- st_read("riberot.shp")
plot(riberot_shp)
plot(ras, main = "dep 09")
plot(riberot_shp, add=T, col="red")
mnt <- crop(ras, riberot_shp)
plot(mnt)
mnt <- st_crop(ras, riberot_shp)
ras <- read_stars(v)
ras
plot(ras, main = "dep 09")
plot(riberot_shp, add=T, col="red")
mnt <- st_crop(ras, riberot_shp)
crs(ras) = "EPSG:2154" # à faire ?
st_crs(ras) = "EPSG:2154" # à faire ?
mnt <- st_crop(ras, riberot_shp)
plot(mnt)
list.files()
setwd("~/OT/GEO/GEO/MASTER/M2/SPATIAL_TREE_P/R/fiche_rzine_geomorphon")
list.files()
geomorphon <- raster("geomorphon_riberot_5m_LD100.tif")
geomorphon <- raster("data/geomorphon_riberot_5m_LD100.tif")
report_geomorphons = qgis_run_algorithm("native:rasterlayeruniquevaluesreport",
INPUT = geomorphon,
BAND = 1,
OUTPUT_TABLE = paste0("rapport_geomorphon_riberot_5m_LD100", ".csv"))
report_geomorphons = qgis_run_algorithm("native:rasterlayeruniquevaluesreport",
INPUT = geomorphon,
BAND = 1,
OUTPUT_TABLE = paste0(getwd(), "data/", "rapport_geomorphon_riberot_5m_LD100", ".csv"))
report_geomorphons = qgis_run_algorithm("native:rasterlayeruniquevaluesreport",
INPUT = geomorphon,
BAND = 1,
OUTPUT_TABLE = paste0("rapport_geomorphon_riberot_5m_LD100v2", ".csv"))
riberot <- read.csv("data/rapport_geomorphon_riberot_5m_LD100.csv")
list.files()
riberot <- read.csv("rapport_geomorphon_riberot_5m_LD100.csv")
riberot
colnames(yvette) <- c("Geomorphon", "Pixel", "Superficie")
colnames(riberot) <- c("Geomorphon", "Pixel", "Superficie")
barplot(yvette$Pixel)
barplot(riberot$Pixel)
library(ggplot2)
ggplot(riberot) +
geom_histogram()
riberot
ggplot(riberot) +
geom_histogram(aes(x = Pixel))
riberot
ggplot(riberot) +
geom_histogram(aes(x = Superficie))
ggplot(riberot) +
geom_bar(aes(x = Superficie))
ggplot(riberot) +
geom_bar(aes(x = Pixel))
ggplot(riberot) +
geom_col(aes(x = Pixel))
ggplot(riberot) +
geom_bar(aes(x = Pixel))
library(gtsummary)
tbl_summary(riberot)
ggplot(riberot) +
geom_col()
ggplot(riberot) +
geom_bar()
source("~/OT/GEO/GEO/MASTER/M2/SPATIAL_TREE_P/R/RZINE/code_rzine_geomorphon.R", encoding = 'UTF-8', echo=TRUE)
tbl_summary(riberot, include = c("Pixel", "Superficie"))
tbl_summary(riberot, include = c("Pixel", "Superficie"))
riberot
riberot <- read.csv("rapport_geomorphon_riberot_5m_LD100.csv")
colnames(riberot) <- c("Geomorphon", "Pixel", "Superficie")
tbl_summary(riberot, include = c("Pixel", "Superficie"))
list.files()
setwd("~/OT/GEO/GEO/MASTER/M2/SPATIAL_TREE_P/R/fiche_rzine_geomorphon")
list.files()
riberot <- read.csv("rapport_geomorphon_riberot_5m_LD100.csv")
colnames(riberot) <- c("Geomorphon", "Pixel", "Superficie")
tbl_summary(riberot, include = c("Pixel", "Superficie"))
tbl_summary(riberot, include = c("Pixel", "Superficie"), by = nom, statistic = list(all_continuous() ~ "{mean}"))
tbl_summary(riberot, include = c("Pixel", "Superficie"), by = riberot, statistic = list(all_continuous() ~ "{mean}"))
tbl_summary(riberot, include = c("Pixel", "Superficie"), by = geomorphon, statistic = list(all_continuous() ~ "{mean}"))
tbl_summary(riberot, include = c("Pixel", "Superficie"), by = geomorphon, statistic = list(all_continuous() ~ "{mean}"))
tbl_summary(riberot, include = c("Pixel", "Superficie"), by = Geomorphon, statistic = list(all_continuous() ~ "{mean}"))
tbl_summary(riberot, include = c("Pixel", "Superficie"), by = Geomorphon, statistic = list(all_continuous() ~ "{sum}"))
tbl_summary(riberot, include = c("Pixel"), by = Geomorphon, statistic = list(all_continuous() ~ "{sum}"))
riberot
riberot
get_labels()
tbl_summary(riberot,
label = Pixel ~ "Nombre de pixels",
include = c("Pixel"),
by = Geomorphon,
statistic = list(all_continuous() ~ "{sum}"),
labels()
)
tbl_summary(riberot,
label = Pixel ~ "Nombre de pixels",
include = c("Pixel"),
by = Geomorphon,
statistic = list(all_continuous() ~ "{sum}"),
)
theme_gtsummary_language("fr", decimal.mark = "," , big.mark = " ")
tbl_summary(riberot,
label = Pixel ~ "Nombre de pixels",
include = c("Pixel"),
by = Geomorphon,
statistic = list(all_continuous() ~ "{sum}"),
)
levels(riberot$Geomorphon)
str(riberot)
riberot$Geomorphon <- as.factor(riberot$Geomorphon)
levels(riberot$Geomorphon)
str(riberot)
levels(riberot$Geomorphon)
riberot$Nom <- factor(riberot$Geomorphon,
levels = c("1",  "2",  "3" , "4" , "5"  ,"6" , "7" , "8" , "9"  ,"10"),
labels = c("Plan", "Sommet", "Crête", "Haut de versant", "Eperon", "Pente", "Creux de versant", "Bas de versant", "Vallée", "Dépression"))
tbl_summary(riberot,
label = Pixel ~ "Nombre de pixels",
include = c("Nom"),
by = Geomorphon,
statistic = list(all_continuous() ~ "{sum}"),
)
str(riberot)
riberot
tbl_summary(riberot,
label = Pixel ~ "Nombre de pixels",
include = c("Nom"),
by = Geomorphon,
statistic = list(all_continuous() ~ "{sum}"),
)
tbl_summary(riberot,
label = Pixel ~ "Nombre de pixels",
include = c("Pixel"),
by = Nom,
statistic = list(all_continuous() ~ "{sum}"),
)
tbl_summary(riberot,
label = Pixel ~ "Nombre de pixels",
include = c("Pixel"),
statistic = list(all_continuous() ~ "{sum}"),
)
tbl_summary(riberot,
label = Pixel ~ "Nombre de pixels",
include = c("Pixel"),
by = Nom,
statistic = list(all_continuous() ~ "{sum}"),
)
tbl_summary(riberot,
label = Pixel ~ "Nombre de pixels",
include = c("Pixel"),
by = Nom,
statistic = list(all_continuous() ~ "{sum}"),
add_overall(last = TRUE, col_label = "**Ensemble** (effectif total: {N})")
)
str(riberot)
tbl_summary(riberot,
label = Pixel ~ "Nombre de pixels",
include = c("Pixel"),
by = Nom,
statistic = list(all_continuous() ~ "{sum}"),
)
tbl_summary(riberot,
label = Pixel ~ "Nombre de pixels",
include = c("Pixel"),
by = Nom,
statistic = list(all_continuous() ~ "{sum}"),
statistic = all_categorical() ~ "{p} %  ({n}/{N})"
)
tbl_summary(riberot,
label = Pixel ~ "Nombre de pixels",
include = c("Pixel"),
by = Nom,
statistic = all_categorical() ~ "{p} %  ({n}/{N})"
)
tbl_summary(riberot,
label = Pixel ~ "Nombre de pixels",
include = c("Pixel"),
by = Nom,
statistic = list(all_continuous() ~ "{sum}"),
)
levels(riberot$Geomorphon)
table(riberot$Geomorphon)
table(riberot$Geomorphon, riberot$Nom)
summary(riberot$Geomorphon)
summary(riberot$Pixel)
tbl_summary(riberot,
label = Pixel ~ "Nombre de pixels",
include = c("Pixel"),
by = Nom,
statistic = list(all_continuous() ~ "{sum}", "{p}"),
)
tbl_summary(riberot,
label = Pixel ~ "Nombre de pixels",
include = c("Pixel"),
by = Nom,
statistic = list(all_continuous() ~ "{sum}", "{n}"),
)
tbl_summary(riberot,
label = Pixel ~ "Nombre de pixels",
include = c("Pixel"),
by = Nom,
statistic = list(all_continuous() ~ "{sum}, ({n})"),
)
tbl_summary(riberot,
label = Pixel ~ "Nombre de pixels",
include = c("Pixel"),
by = Nom,
statistic = list(all_continuous2() ~ "{sum}"),
)
tbl_summary(riberot,
label = Pixel ~ "Nombre de pixels",
include = c("Pixel"),
by = Nom,
statistic = list(all_continuous() ~ "{sum}"),
)
tbl_summary(riberot,
label = Pixel ~ "Nombre de pixels",
include = c("Pixel"),
by = Nom,
statistic = list(all_categorical() ~ "{sum}"),
)
tbl_summary(riberot,
label = Pixel ~ "Nombre de pixels",
include = c("Pixel"),
by = Nom,
statistic = list(all_categorical() ~ "{sum} ({n})"),
)
tbl_summary(riberot,
label = Pixel ~ "Nombre de pixels",
include = c("Pixel"),
by = Nom,
)
tbl_summary(riberot,
label = Pixel ~ "Nombre de pixels",
include = c("Pixel"),
by = Nom,
statistic = list(all_continuous() ~ "{sum}")
)
tbl_summary(riberot,
label = Pixel ~ "Nombre de pixels",
include = c("Pixel"),
by = Nom,
statistic = list(all_continuous() ~ "{sum}"),
add_overall()
)
knitr::opts_chunk$set(echo = TRUE)
riberot <- read.csv("rapport_geomorphon_riberot_5m_LD100.csv")
riberot <- read.csv("rapport_geomorphon_riberot_5m_LD100.csv")
riberot <- read.csv("data/rapport_geomorphon_riberot_5m_LD100.csv")
riberot <- read.csv("rapport_geomorphon_riberot_5m_LD100.csv")
riberot <- read.csv("rapport_geomorphon_riberot_5m_LD100.csv", sep";")
riberot <- read.csv("rapport_geomorphon_riberot_5m_LD100.csv")
riberot$Geomorphon <- as.factor(riberot$Geomorphon)
riberot <- read.csv("rapport_geomorphon_riberot_5m_LD100.csv")
riberot$Geomorphon <- as.factor(riberot$Geomorphon)
riberot
# Sélection du BV via la GeoJSON ----
setwd("~/OT/GEO/GEO/MASTER/M2/SPATIAL_TREE_P/R/RZINE")
bv <- st_read("BassinVersantTopographique.json")
riberot <- bv %>% filter(bv$TopoOH == "La Séveraisse du torrent de Navette au Drac")
riberot_proj <- st_transform(riberot, 2154)
plot(riberot_proj)
st_write(riberot_proj, paste0(getwd(), "/", "severaisse.shp"))
riberot_shp <- st_read("severaisse.shp")
plot(riberot_shp)
# Création du raster virtuel Drac ----
setwd("C:/Users/thier/Downloads/mnt_05")
c <- "C:/Users/thier/Downloads/mnt_05"
v <- "C:/Users/thier/Downloads/new.vrt" # name of virtual raster
ras_lst <- list.files(c, full.names = T, pattern = ".asc$", recursive=T) # sélection de toutes les dalles
head(ras_lst)
terra::vrt(ras_lst, v, overwrite = T) # création du raster virtuel
ras <- read_stars(v)
st_crs(ras) = "EPSG:2154" # à faire ?
plot(ras, main = "dep 05")
plot(riberot_shp, add=T, col="red")
plot(riberot_shp)
plot(ras, main = "dep 05")
ras
mnt <- st_crop(ras, riberot_shp)
plot(mnt)
write_stars(mnt,"mnt_severaisse.tif")
mnt <- raster("mnt_severaisse.tif")
plot(mnt, main="Severaisse")
## Traitement Geomorphons ----
dem_geomorphons = qgis_run_algorithm("saga:geomorphons", # attention, il faut que l'extension soit active dans QGIS
DEM = mnt,
THRESHOLD = 1,
RADIUS = 100,
METHOD = 1,
GEOMORPHONS = paste0("geomorphon_severaisse_5m_LD100",".tif"))
geomorphon <- raster("geomorphon_severaisse_5m_LD100.tif")
report_geomorphons = qgis_run_algorithm("native:rasterlayeruniquevaluesreport",
INPUT = geomorphon,
BAND = 1,
OUTPUT_TABLE = paste0("rapport_geomorphon_severaisse_5m_LD100_",".csv"))
# Sélection du BV via la GeoJSON ----
setwd("~/OT/GEO/GEO/MASTER/M2/SPATIAL_TREE_P/R/RZINE")
bv <- st_read("BassinVersantTopographique.json")
riberot <- bv %>% filter(bv$TopoOH == "La Tarentaine (Trentaine) de sa source au confluent de l'Eau Verte")
riberot_proj <- st_transform(riberot, 2154)
plot(riberot_proj)
st_write(riberot_proj, paste0(getwd(), "/", "tarentaine.shp"))
riberot_shp <- st_read("tarentaine.shp")
plot(riberot_shp)
setwd("~/OT/GEO/GEO/MASTER/M2/SPATIAL_TREE_P/R/fiche_rzine_geomorphon/data")
list.files()
geomorphon <- raster("data/geomorphon_tarentaine_5m_LD100.tif")
geomorphon <- raster("geomorphon_tarentaine_5m_LD100.tif")
report_geomorphons = qgis_run_algorithm("native:rasterlayeruniquevaluesreport",
INPUT = geomorphon,
BAND = 1,
OUTPUT_TABLE = paste0("rapport_geomorphon_riberot_5m_LD100", ".csv"))
report_geomorphons = qgis_run_algorithm("native:rasterlayeruniquevaluesreport",
INPUT = geomorphon,
BAND = 1,
OUTPUT_TABLE = paste0("rapport_geomorphon_tarentaine_5m_LD100", ".csv"))
setwd("/home/poulpe/scripts/fiche_rzine_geomorphon/")
library(qgisprocess)
library(sf)
# chargement de la couche des bassins
bv <- st_read("data/BassinVersantTopographique_FXX.gpkg")
riberot <- bv %>% filter(bv$TopoOH == "Le Ribérot")
riberot_proj <- st_transform(riberot, 2154)
st_write(riberot_proj, paste0(getwd(), "/", "riberot.shp"))
riberot_shp <- st_read("riberot.shp")
plot(riberot_shp)
```
bv <- st_read("data/BassinVersantTopographique_FXX.gpkg")
plot(bv)
riberot <- bv %>% filter(bv$TopoOH == "Le Ribérot")
riberot
bv
bv %>% filter(bv$TopoOH == "Le Ribérot")
bv$TopoOH
library ("dplyr")
riberot <- bv %>% filter(bv$TopoOH == "Le Ribérot")
riberot
library(sf)
# chargement de la librairie dplyr pour utiliser simplement les filtres de dataframe
library ("dplyr")
st_write(riberot, "data_processed/bv_riberot")
st_write(riberot, "data_processed/bv_riberot")
# chargement de la couche des bassins de toute la France
bv <- st_read("data/BassinVersantTopographique_FXX.gpkg")
# extraction du bassin du Ribérot selon son nom
riberot <- bv %>% filter(bv$TopoOH == "Le Ribérot")
# export du bassin du Ribérot en une couche autonome (facultatif)
st_write(riberot, "data_processed/bv_riberot.gpkg")
st_write(riberot_proj, paste0(getwd(), "/", "riberot.shp"))
riberot_shp <- st_read("riberot.shp")
plot(riberot_shp)
```
st_write(riberot, "data_processed/bv_riberot.gpkg")
severaisse <- bv %>% filter(bv$TopoOH == "La Séveraisse de sa source au torrent de Navette inclus")
# extraction du bassin de la Séveraisse (La Séveraisse de sa source au torrent de Navette inclus)
severaisse <- bv %>% filter(bv$TopoOH == "La Séveraisse de sa source au torrent de Navette inclus")
st_write(severaisse, "data_processed/bv_severaisse.gpkg")
```
st_write(severaisse, "data_processed/bv_severaisse.gpkg")
tarentaine <- bv %>% filter(bv$TopoOH == "La Tarentaine (Trentaine) de sa source au confluent de l'Eau Verte")
st_write(tarentaine, "data_processed/bv_tarentaine.gpkg")
library(terra)
library(stars)
path_dem_09 <- "data/RGE_5m_Dep09/"
dem_09 <- "data_processed/RGE_5m_Dep09.vrt"
ras_lst <- list.files(c, full.names = T, pattern = ".asc$", recursive=T)
ras_lst <- list.files(path_dem_09, full.names = T, pattern = ".asc$", recursive=T)
ras_lst
terra::vrt(ras_lst, dem_09, overwrite = T)
qgis_run_algorithm("gdal:buildvirtualraster",
INPUT = ras_lst,
ASSIGN_CRS='EPSG:2154'
OUTPUT=dem_09)
qgis_run_algorithm("gdal:buildvirtualraster",
INPUT = ras_lst,
ASSIGN_CRS="EPSG:2154"
OUTPUT=dem_09)
qgis_run_algorithm("gdal:buildvirtualraster",
INPUT = ras_lst,
ASSIGN_CRS='EPSG:2154',
OUTPUT=dem_09)
path_dem_09 <- getwd() + "/data/RGE_5m_Dep09/"
path_dem_09 <- paste(getwd()"/data/RGE_5m_Dep09/")
getwd()
path_dem_09 <- paste(getwd(),"/data/RGE_5m_Dep09/")
path_dem_09
path_dem_09 <- paste(getwd(),"/data/RGE_5m_Dep09/", sep="")
path_dem_09
path_dem_09 <- "/data/RGE_5m_Dep09/"
path_dem_09 <- paste(getwd(),"/data/RGE_5m_Dep09/", sep="")
dem_09 <- "data_processed/RGE_5m_Dep09.vrt"
ras_lst <- list.files(path_dem_09, full.names = T, pattern = ".asc$", recursive=T)
qgis_run_algorithm("gdal:buildvirtualraster",
INPUT = ras_lst,
ASSIGN_CRS='EPSG:2154',
OUTPUT=dem_09)
qgis_run_algorithm("gdal:buildvirtualraster",
INPUT = ras_lst,
SEPARATE=false,
ASSIGN_CRS='EPSG:2154',
OUTPUT=dem_09)
qgis_run_algorithm("gdal:buildvirtualraster",
INPUT = ras_lst,
SEPARATE=FALSE,
ASSIGN_CRS='EPSG:2154',
OUTPUT=dem_09)
# Pour le département des Hautes-Alpes (05)
# indication du répertoire contenant les dalles de MNT des Hautes-Alpes
path_dem_05 <- "/data/RGE_5m_Dep05/"
# on transforme ce chemin en chemin abslou
path_dem_05 <- paste(getwd(),"/data/RGE_5m_Dep05/", sep="")
# le nom et le chemin du raster virtuel qui sera produit
dem_05 <- "data_processed/RGE_5m_Dep05.vrt"
# on construit la liste de toutes les dalles de MNT du département
ras_lst <- list.files(path_dem_05, full.names = T, pattern = ".asc$", recursive=T)
# on construit le raster virtuel des Hautes-Alpes via QGIS process
qgis_run_algorithm("gdal:buildvirtualraster",
INPUT = ras_lst,
SEPARATE=FALSE,
ASSIGN_CRS='EPSG:2154',
OUTPUT=dem_05)
# Pour le département du Puy-de-Dôme (63)
# indication du répertoire contenant les dalles de MNT du Puy-de-Dôme
path_dem_63 <- "/data/RGE_5m_Dep63/"
# on transforme ce chemin en chemin abslou
path_dem_63 <- paste(getwd(),"/data/RGE_5m_Dep63/", sep="")
# le nom et le chemin du raster virtuel qui sera produit
dem_63 <- "data_processed/RGE_5m_Dep63.vrt"
# on construit la liste de toutes les dalles de MNT du département
ras_lst <- list.files(path_dem_63, full.names = T, pattern = ".asc$", recursive=T)
# on construit le raster virtuel du Puy-de-Dôme via QGIS process
qgis_run_algorithm("gdal:buildvirtualraster",
INPUT = ras_lst,
SEPARATE=FALSE,
ASSIGN_CRS='EPSG:2154',
OUTPUT=dem_63)
riberot <- st_read("data_processed/bv_riberot.gpkg")
severaisse <- st_read("data_processed/bv_severaisse.gpkg")
tarentaine <- st_read("data_processed/bv_tarentaine.gpkg")
library("terra")
mnt_09 <- rast("data_processed/RGE_5m_Dep09.vrt")
plot(mnt_09)
dem_09 <- rast("data_processed/RGE_5m_Dep09.vrt")
dem_riberot <- crop(dem_09, bv_riberot)
dem_riberot <- crop(dem_09, riberot)
plot(dem_riberot)
dem_riberot <- crop(dem_09, riberot, mask=TRUE)
plot(dem_riberot)
plot(dem_riberot)
dem_09 <- rast("data_processed/RGE_5m_Dep09.vrt")
dem_riberot <- mask(dem_09, riberot)
a <- vect(riberot)
a
dem_riberot <- mask(dem_09, a)
plot(dem_riberot)
riberot <- vect(riberot)
dem_riberot <- cropt(dem_09, riberot)
dem_riberot <- crop(dem_09, riberot)
plot(dem_riberot)
dem_riberot <- mask(dem_09, riberot)
plot(dem_riberot)
dem_riberot <- mask(dem_riberot, riberot)
plot(dem_riberot)
dem_riberot <- crop(dem_09, riberot)
plot(dem_riberot)
dem_riberot <- mask(dem_riberot, riberot)
plot(dem_riberot)
dem_05 <- rast("data_processed/RGE_5m_Dep05.vrt")
# conversion des limites de la Séveraisse en un objet SpatVector utilisable par terra
severaisse <- vect(severaisse)
# découpage de ce MNT selon l'étendue spatiale des limites de la Severaisse
dem_severaisse <- crop(dem_05, severaisse)
# masque du MNT selon les limites de la Severaisse
dem_severaisse <- mask(dem_severaisse, severaisse)
plot(dem_severaisse)
# chargement du MNT virtuel du Puy-de-Dôme
dem_63 <- rast("data_processed/RGE_5m_Dep63.vrt")
# conversion des limites de la Tarentaine en un objet SpatVector utilisable par terra
tarentaine <- vect(tarentaine)
# découpage de ce MNT selon l'étendue spatiale des limites de la Tarentaine
dem_tarentaine <- crop(dem_63, tarentaine)
# masque du MNT selon les limites de la Tarentaine
dem_tarentaine <- mask(dem_tarentaine, tarentaine)
plot(dem_tarentaine)
install.packages("tmap")
install.packages("sp")
install.packages("raster")
install.packages("rgdal")
